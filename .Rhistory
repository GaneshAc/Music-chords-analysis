chorddiag::chorddiag(mm, showTicks = FALSE,
palette = "Blues")
library(chorrrds)
ls("package:chorrrds")
library(tidyverse)
library(tidytext)
set.seed(20191)
songs <- "janis-joplin" %>%
chorrrds::get_songs() %>%
dplyr::sample_n(5)        # Selecting a random sample of 5 pieces
View(songs)
View(songs)
View(songs)
chords <- songs %>%
dplyr::pull(url) %>%
purrr::map(chorrrds::get_chords) %>%     # Mapping the function over the
# selected urls
purrr::map_dfr(dplyr::mutate_if, is.factor, as.character)   %>%
chorrrds::clean(message = FALSE)         # C
chords %>% slice(1:10) %>% knitr::kable()
chords <- chords %>%
tidyr::separate(music, c("artist", "music"),
sep = "(?<=joplin) ", extra = "merge")
chords %>% slice(1:10) %>% knitr::kable()
chords %>%
dplyr::group_by(music) %>%
dplyr::count(chord) %>%
dplyr::top_n(n, n = 3) %>%
dplyr::mutate(prop = scales::percent(n/sum(n))) %>%
knitr::kable()
chords %>%
dplyr::group_by(music) %>%
tidytext::unnest_tokens(bigram, chord, to_lower = FALSE,
token = "ngrams", n = 2) %>%
dplyr::count(bigram) %>%
dplyr::top_n(n, n = 2) %>%
knitr::kable()
library(chorddiag)
comp <- chords %>%
dplyr::mutate(seq = lead(chord)) %>%
dplyr::filter(chord != seq) %>%
dplyr::group_by(chord, seq) %>%
dplyr::summarise(n = n())
mat <- tidyr::spread(comp, key = chord, value = n, fill = 0)
mm <- as.matrix(mat[-19, -1])
View(mat)
chorddiag::chorddiag(mm, showTicks = FALSE,
palette = "Blues")
palette?
??palete
palete??
ls("package:chorrrds")
ls("package:chorrrds")
songs <- "supercombo" %>%
chorrrds::get_songs() %>%
dplyr::sample_n(5)
chords <- songs %>%
dplyr::pull(url) %>%
purrr::map(chorrrds::get_chords) %>%     # Mapping the function over the
# selected urls
purrr::map_dfr(dplyr::mutate_if, is.factor, as.character)   %>%
chorrrds::clean(message = FALSE)
chords %>% slice(1:10) %>% knitr::kable()
chords <- chords %>%
tidyr::separate(music, c("artist", "music"),
sep = "(?<=amianto) ", extra = "merge")
chords <- chords %>%
tidyr::separate(music, c("artist", "music"),
sep = "(?<=supercombo) ", extra = "merge")
chords %>% slice(1:10) %>% knitr::kable()
chords <- chords %>%
tidyr::separate(music, c("artist", "music"),
sep = "(?<=combo) ", extra = "merge")
chords %>% slice(1:10) %>% knitr::kable()
songs <- "supercombo" %>%
chorrrds::get_songs() %>%
dplyr::sample_n(5)        # Selecting a random sample of 5 pieces
# Step 2: getting the chords for the selected songs
chords <- songs %>%
dplyr::pull(url) %>%
purrr::map(chorrrds::get_chords) %>%     # Mapping the function over the
# selected urls
purrr::map_dfr(dplyr::mutate_if, is.factor, as.character)   %>%
chorrrds::clean(message = FALSE)         # Cleans the dataset, in case
# strange elements, as music lyrics,
# are present when they shouldn't
chords %>% slice(1:10) %>% knitr::kable()
songs <- "Aa_Prabhu_Yeshu_aa " %>%
chorrrds::get_songs() %>%
dplyr::sample_n(5)
search_data <- function(name){
av_data <- data(package = "chorrrds")$results[ ,3]
for(i in 1:length(av_data)){
cond <- grepl(name, av_data[i])
if(cond == TRUE){
print(av_data[i])
test <- 1
} else {
test <- 0
}
}
if(test == 0){
print("End of research.") }
}
View(search_data)
chorddiag::chorddiag(mm, showTicks = FALSE,
palette = "Blues")
